<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
  http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 
		
		Configuration for the Export Manager
		
		
		There are currently three different implementations for exporting log files:
		
		 a) SimpleLogExporter
		    .................
		    a generic hibernate version which does a plain select and writes the resulting
		    LoggingObject list into a csv file.
		    
		    This version runs on all standard OLAT deployments where the o_loggingtable
		    resides in the normal DB
		    
		    The downside of this version is that it is slow with big tables and result sets
		    
		 b) SQLLogExporter
		    ..............
		    an optimized sql-export version which leaves the job to export the selected
		    o_loggingtable rows into a csv file to the database.
		    
		    This version requires database specific SQL to be configured in this file.
		    
		    This version should be performant since it leaves the job to the database
		    to export and doesn't read the result into the JVM.
		    
		    The downside of this version is that it requires 'FILE' permissions for
		    the database user executing the 'SELECT INTO OUTFILE' statement. This FILE
		    permission is a security risk and hence a possible concern.	
	-->
	
	<!-- 
	.........................................................
	Configuration of ExportManager - required for any version
	.........................................................
	
	Cluster-Node:
		An ExportManager must be configured on every host in a cluster,
		plus an AsyncExportManager
	 -->
	 
	<bean id="logExportManager"
		class="org.olat.course.statistic.ExportManager">
	
		<property name="courseLogExporter">
			<ref bean="courseLogExporter"/>
		</property>
	</bean>
	
	<bean id="asyncLogExportManager"
		class="org.olat.course.statistic.AsyncExportManager">
		<property name="taskExecutorManager" ref="taskExecutorManager"/>
		<property name="concurrentExportsPerNode" value="2"/>
	</bean>

	<!-- 
	.............................................................
	Configuration of DataSource - required for versions b) and c)
	.............................................................
	 -->
	


	<!-- 
	........................................................................
	Sample remaining configuration for SimpleLogExporter or version a) above
	........................................................................
	 -->

	<bean id="courseLogExporter" class="org.olat.course.statistic.export.SimpleLogExporter"/>

	<bean id="logLineConverter"
		class="org.olat.course.statistic.export.LogLineConverter">
		<property name="orderedExportedProperties">
			<list>
				<value>creationDate</value>
				<value>userName</value>
				<value>actionCrudType</value>
				<value>actionVerb</value>
				<value>actionObject</value>
				<value>parentResName</value>
				<value>targetResName</value>
			</list>
		</property>
		<property name="anonymizedProperties">
			<list>
				<value>userName</value>
			</list>		
		</property>
	</bean>

	<!--  STATISTICS BEANS -->
	<bean id="statisticsJdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="${db.vendor}_${db.source}_DataSource"/>
		</property>
	</bean>


	<!-- mysql  :  select businesspath,date(creationdate) day, count(*) cnt from o_loggingtable group by businesspath,day -->
 	<bean id="statisticUpdateConfig_mysql" class="org.olat.course.statistic.StatisticUpdateConfig" lazy-init="true">
 		<property name="updaters">
			<list>
				<bean class="org.olat.course.statistic.MySQLTempStatTableCreator" >
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
				</bean>
				<ref bean="dailyStatisticUpdater_mysql"/>
				<ref bean="weeklyStatisticUpdater_mysql"/>
				<ref bean="dayOfWeekStatisticUpdater_mysql"/>
				<ref bean="hourOfDayStatisticUpdater_mysql"/>
				<bean class="org.olat.course.statistic.MySQLTempStatTableDropper" >
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
				</bean>
			</list>
		</property>
	</bean>
	
	<!--  postgres  select businesspath,date(creationdate) day, count(*) cnt from o_loggingtable group by businesspath,day -->
	<bean id="statisticUpdateConfig_postgresql" class="org.olat.course.statistic.StatisticUpdateConfig" lazy-init="true">
		<property name="updaters">
			<list>
				<bean class="org.olat.course.statistic.PostgreSQLTempStatTableCreator" >
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
				</bean>
				<ref bean="dailyStatisticUpdater_postgresql" />
				<ref bean="weeklyStatisticUpdater_postgresql" />
				<ref bean="dayOfWeekStatisticUpdater_postgresql" />
				<ref bean="hourOfDayStatisticUpdater_postgresql" />
				<bean class="org.olat.course.statistic.PostgreSQLTempStatTableDropper" >
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
				</bean>
			</list>
		</property>
	</bean>
	
	<bean class="org.olat.course.statistic.StatisticUpdater" id="dailyStatisticUpdater_mysql" lazy-init="true">
		<property name="loggingName" value="DailyStatisticUpdater"/>
		<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
		<property name="updateSQL">
			<list>
				<!-- 
				
				    'old' represents the existing i.e. old table
				    'delta' represents the new stuff being added
				    this update goes through the 'old' table and adds from the 'delta' where entries already exist in 'old'
				  update o_stat_dayofweek as old, (select businesspath,dayofweek(creationdate) day, count(*) cnt from o_loggingtable where actionverb='launch' and actionobject='node' group by businesspath,day) as delta SET old.value=old.value+delta.cnt where old.day=delta.day and old.businesspath=delta.businesspath;
				
				 -->
				<value>
					update o_stat_daily as old,
						(select businesspath,date(creationdate) day, count(*) cnt from o_stat_temptable group by businesspath,day) as delta
					set old.value=old.value+delta.cnt
						where old.day=delta.day and old.businesspath=delta.businesspath;
				</value>
				<!-- 
				
				  again:
				    'old' represents the existing i.e. old table
				    'delta' represents the new stuff being added
				    this insert goes through the delta to add entries which do not yet exist in the 'old' table at all
				  insert into o_stat_dayofweek (businesspath,day,value) select delta.businesspath,delta.day,delta.cnt from (select businesspath,dayofweek(creationdate) day,count(*) cnt from o_loggingtable where actionverb='launch' and actionobject='node' group by businesspath,day) delta left join o_stat_dayofweek old on delta.businesspath=old.businesspath and delta.day=old.day where old.businesspath is null;
				
				 -->
				<value>
					insert into o_stat_daily (businesspath, resid, day, value)
						select
							delta.businesspath, delta.resid, delta.day, delta.cnt
						from (select
									businesspath,
									substr(businesspath,locate(':',businesspath)+1,locate(']',businesspath)-locate(':',businesspath)-1) resid,
									date(creationdate) day,
									count(*) cnt
							from o_stat_temptable
							group by businesspath,day) delta
							left join o_stat_daily old on (delta.businesspath=old.businesspath and delta.day=old.day)
						where old.businesspath is null;
				</value>
				<value>
					delete from o_stat_daily where datediff(now(),day)>180;
				</value>
			</list>
		</property>
		<property name="deleteSQL" value="delete from o_stat_daily;"/>
	</bean>
	
	<bean class="org.olat.course.statistic.StatisticUpdater" id="dailyStatisticUpdater_postgresql" lazy-init="true">
		<property name="loggingName" value="DailyStatisticUpdater"/>
		<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
		<property name="updateSQL">
			<list>
				<value>
update o_stat_daily set value=value + delta.cnt
from (select temptable.businesspath as tempbusinesspath, date_trunc('day', temptable.creationdate) as d, count(*) cnt
  from o_stat_temptable as temptable
  group by temptable.businesspath, d) as delta
where day=delta.d and businesspath=delta.tempbusinesspath;
				</value>
				<value>
insert into o_stat_daily (businesspath, resid, day, value)  
  (select temptable.businesspath as path, 
     int8(substring(temptable.businesspath from position(':' in temptable.businesspath) + 1 for position(']' in temptable.businesspath) - position(':' in temptable.businesspath) - 1)) as resid,
     date_trunc('day', temptable.creationdate) as d,
     count(*) as cnt 
   from o_stat_temptable as temptable
   left join o_stat_daily old on (temptable.businesspath=old.businesspath and date_trunc('day', temptable.creationdate)=old.day)
   where temptable.businesspath != '' and old.businesspath is null
   group by temptable.businesspath, d);
				</value>
			</list>
		</property>
		
		<property name="deleteSQL" value="delete from o_stat_daily;"/>		
	</bean>

	<bean id="weeklyStatisticUpdater_mysql" class="org.olat.course.statistic.StatisticUpdater">
		<property name="loggingName" value="weeklyStatisticUpdater"/>
		<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
		<property name="updateSQL">
			<list>
				<value>
					update o_stat_weekly as old,
						(select businesspath,concat(year(creationdate),'-',lpad(week(creationdate,3),2,'0')) week, count(*) cnt from o_stat_temptable group by businesspath,week) as delta
					set old.value=old.value+delta.cnt
						where old.week=delta.week and old.businesspath=delta.businesspath;							
				</value>
				<value>
					insert into o_stat_weekly (businesspath,resid,week,value)
						select
							delta.businesspath, delta.resid, delta.week, delta.cnt
						from
							(select
									businesspath,
									substr(businesspath,locate(':',businesspath)+1,locate(']',businesspath)-locate(':',businesspath)-1) resid,
									concat(year(creationdate),'-',lpad(week(creationdate,3),2,'0')) week,
									count(*) cnt
								from o_stat_temptable group by businesspath,week) delta
							left join o_stat_weekly old on delta.businesspath=old.businesspath and delta.week=old.week
						where old.businesspath is null;
				</value>
				<value>
					delete from o_stat_weekly where week&lt;concat(year(now() - interval 180 day),'-',lpad(week(now() - interval 180 day,3),2,'0'));
				</value>
			</list>
		</property>
		<property name="deleteSQL" value="delete from o_stat_weekly;"/>
	</bean>
	
	<bean id="weeklyStatisticUpdater_postgresql"  class="org.olat.course.statistic.StatisticUpdater">
		<property name="loggingName" value="WeeklyStatisticUpdater"/>
		<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
		<property name="updateSQL">
			<list>
				<value>
update o_stat_weekly set value = value + delta.cnt
from (select businesspath as tempbusinesspath,
  (date_part('year', temptable.creationdate) || '-' || date_part('week', temptable.creationdate)) as w,
  count(*) cnt
  from o_stat_temptable as temptable
  group by tempbusinesspath, w) as delta 
  where week=delta.w and businesspath=tempbusinesspath;
				</value>
				<value>
insert into o_stat_weekly (businesspath, resid, week, value)  
  (select temptable.businesspath,
     int8(substring(temptable.businesspath from position(':' in temptable.businesspath) + 1 for position(']' in temptable.businesspath) - position(':' in temptable.businesspath) - 1)) as resid,
     (date_part('year', temptable.creationdate) || '-' || date_part('week', temptable.creationdate)) as w,
     count(*) as cnt 
   from o_stat_temptable as temptable
   left join o_stat_weekly old on (temptable.businesspath=old.businesspath and (date_part('year', temptable.creationdate) || '-' || date_part('week', temptable.creationdate))=old.week)
   where temptable.businesspath != '' and old.businesspath is null
   group by temptable.businesspath, w);
				</value>
			</list>
		</property>
		<property name="deleteSQL" value="delete from o_stat_weekly;"/>
	</bean>

	<bean id="dayOfWeekStatisticUpdater_mysql" class="org.olat.course.statistic.StatisticUpdater">
		<property name="loggingName" value="DayOfWeekStatisticUpdater"/>
		<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
		<property name="updateSQL">
			<list>
				<value>
					update o_stat_dayofweek as old,
						(select businesspath,dayofweek(creationdate) day, count(*) cnt from o_stat_temptable group by businesspath,day) as delta
					SET old.value=old.value+delta.cnt
						where old.day=delta.day and old.businesspath=delta.businesspath;
				</value>
				<value>
					insert into o_stat_dayofweek (businesspath,resid,day,value)
						select
							delta.businesspath, delta.resid, delta.day, delta.cnt
						from
							(select
									businesspath,
									substr(businesspath,locate(':',businesspath)+1,locate(']',businesspath)-locate(':',businesspath)-1) resid,
									dayofweek(creationdate) day,
									count(*) cnt
								from o_stat_temptable group by businesspath,day) delta
							left join o_stat_dayofweek old on delta.businesspath=old.businesspath and delta.day=old.day
						where old.businesspath is null;
				</value>
			</list>
		</property>
		<property name="deleteSQL" value="delete from o_stat_dayofweek;"/>
	</bean>
	
	<bean id="dayOfWeekStatisticUpdater_postgresql" class="org.olat.course.statistic.StatisticUpdater" >
		<property name="loggingName" value="DayOfWeekStatisticUpdater"/>
		<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
		<property name="updateSQL">
			<list>
				<value>
update o_stat_dayofweek set value = value + delta.cnt
from (select temptable.businesspath as tempbusinesspath, int8(to_char(temptable.creationdate, 'D')) as d, count(*) cnt
  from o_stat_temptable as temptable
  group by tempbusinesspath, d) as delta
  where day=delta.d and businesspath=tempbusinesspath;
				</value>
				<value>
insert into o_stat_dayofweek (businesspath, resid, day, value)
  (select temptable.businesspath,
     int8(substring(temptable.businesspath from position(':' in temptable.businesspath) + 1 for position(']' in temptable.businesspath) - position(':' in temptable.businesspath) - 1)),
     int8(to_char(temptable.creationdate, 'D')) as d,
     count(*) as cnt
  from o_stat_temptable as temptable
  left join o_stat_dayofweek old on (temptable.businesspath=old.businesspath and int8(to_char(temptable.creationdate, 'D'))=old.day)
  where temptable.businesspath != '' and old.businesspath is null
  group by temptable.businesspath, d);
				</value>
			</list>
		</property>
		<property name="deleteSQL" value="delete from o_stat_dayofweek;"/>
	</bean>

	<bean id="hourOfDayStatisticUpdater_mysql" class="org.olat.course.statistic.StatisticUpdater">
		<property name="loggingName" value="HourOfDayStatisticUpdater"/>
		<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
		<property name="updateSQL">
			<list>
				<value>
					update o_stat_hourofday as old,
						(select businesspath,hour(creationdate) hour, count(*) cnt from o_stat_temptable group by businesspath,hour) as delta
					SET old.value=old.value+delta.cnt
						where old.hour=delta.hour and old.businesspath=delta.businesspath;
				</value>
				<value>
					insert into o_stat_hourofday (businesspath,resid,hour,value)
						select
							delta.businesspath, delta.resid, delta.hour, delta.cnt
						from
							(select
									businesspath,
									substr(businesspath,locate(':',businesspath)+1,locate(']',businesspath)-locate(':',businesspath)-1) resid,
									hour(creationdate) hour,
									count(*) cnt
								from o_stat_temptable group by businesspath,hour) delta
							left join o_stat_hourofday old on delta.businesspath=old.businesspath and delta.hour=old.hour
						where old.businesspath is null;
				
				</value>
			</list>
		</property>
		<property name="deleteSQL" value="delete from o_stat_hourofday;"/>
	</bean>
	
	<bean id="hourOfDayStatisticUpdater_postgresql" class="org.olat.course.statistic.StatisticUpdater" >
		<property name="loggingName" value="HourOfDayStatisticUpdater"/>
		<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
		<property name="updateSQL">
			<list>
				<value>
update o_stat_hourofday set value = value + delta.cnt
from(select temptable.businesspath as tempbusinesspath, date_part('hour', temptable.creationdate) as h, count(*) cnt
  from o_stat_temptable as temptable
  group by businesspath, h) as delta
where hour=delta.h and businesspath=tempbusinesspath;
				</value>
				<value>
insert into o_stat_hourofday (businesspath, resid, hour, value)  
  (select temptable.businesspath, 
    int8(substring(temptable.businesspath from position(':' in temptable.businesspath) + 1 for position(']' in temptable.businesspath) - position(':' in temptable.businesspath) - 1)), 
    date_part('hour', temptable.creationdate) as h,
    count(*) as cnt
   from o_stat_temptable as temptable
   left join o_stat_hourofday old on (temptable.businesspath=old.businesspath and date_part('hour', temptable.creationdate)=old.hour)
   where temptable.businesspath != '' and old.businesspath is null
   group by temptable.businesspath, h);
				</value>
			</list>
		</property>
		<property name="deleteSQL" value="delete from o_stat_hourofday;"/>
	</bean>
	
	<bean id="statisticUpdateConfig_oracle" class="org.olat.course.statistic.StatisticUpdateConfig" lazy-init="true">
		<property name="updaters">
			<list>
				<bean class="org.olat.course.statistic.StatisticUpdater" id="LastUpdatedUpdater_oracle">
					<property name="loggingName" value="LastUpdatedUpdater_oracle"/>
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
					<property name="updateSQL">
						<list>
							<value>
								update o_stat_lastupdated set from_datetime = until_datetime
							</value>
							<value>
								update o_stat_lastupdated set until_datetime = (select sysdate - (5/(24*60)) from dual)
							</value>
						</list>
					</property>
					<property name="deleteSQL">
						<list>
							<value>
								update o_stat_lastupdated set until_datetime = to_date('19900101', 'YYYYmmdd')
							</value>
						</list>
					</property>
				</bean>
			
				<bean class="org.olat.course.statistic.StatisticUpdater" >
					<property name="loggingName" value="StatTempTableCreator_oracle"/>
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
					<property name="updateSQL">
						<list>
							<value>
							  <![CDATA[
								create table o_stat_temptable as 
								select creationdate, businesspath, userproperty2, userproperty4, userproperty10, userproperty3,
								       to_number(substr(businesspath, instr(businesspath, ':') + 1, instr(businesspath, ']') - instr(businesspath, ':') - 1)) resid
								from o_loggingtable
								where actionverb='launch' and actionobject='node' and businesspath is not null 
								  and creationdate >= (select from_datetime  from o_stat_lastupdated) 
								  and creationdate <  (select until_datetime from o_stat_lastupdated)
							  ]]>
							</value>
						</list>
					</property>
				</bean>
				
				<bean class="org.olat.course.statistic.StatisticUpdater">
					<property name="loggingName" value="DailyStatisticUpdater"/>
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
					<property name="updateSQL">
						<list>
							<value>
								merge into o_stat_daily old 
								using (select businesspath, resid, to_date(to_char(creationdate, 'YYYY-MM-DD'), 'YYYY-MM-DD') day, count (*) cnt 
         								 from o_stat_temptable
         							    group by businesspath, resid, to_date(to_char(creationdate, 'YYYY-MM-DD'), 'YYYY-MM-DD') ) delta
								on (old.businesspath = delta.businesspath AND old.day = delta.day)
								when matched then
								 update set old.value=old.value+delta.cnt
								when not matched then
								 insert (old.businesspath, old.resid, old.day, old.value)
								   values (delta.businesspath, delta.resid, delta.day, delta.cnt)
							</value>
						</list>
					</property>
					<property name="deleteSQL" value="truncate table o_stat_daily"/>
				</bean>
			
				<bean class="org.olat.course.statistic.StatisticUpdater" >
					<property name="loggingName" value="WeeklyStatisticUpdater"/>
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
					<property name="updateSQL">
						<list>
							<value>
								merge into o_stat_weekly old 
								using (select businesspath, resid, to_char(creationdate, 'IYYY') || '-' || to_char(creationdate, 'IW') week, count (*) cnt 
         								 from o_stat_temptable
         							    group by businesspath, resid, to_char(creationdate, 'IYYY') || '-' || to_char(creationdate, 'IW') ) delta
								on (old.businesspath = delta.businesspath AND old.week = delta.week)
								when matched then
								 update set old.value=old.value+delta.cnt
								when not matched then
								 insert (old.businesspath, old.resid, old.week, old.value)
								   values (delta.businesspath, delta.resid, delta.week, delta.cnt)
							</value>
						</list>
					</property>
					<property name="deleteSQL" value="truncate table o_stat_weekly"/>
				</bean>
			
				<bean class="org.olat.course.statistic.StatisticUpdater">
					<property name="loggingName" value="DayOfWeekStatisticUpdater"/>
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
					<property name="updateSQL">
						<list>
							<value>
								merge into o_stat_dayofweek old 
								using (select businesspath, resid, to_char(creationdate, 'D') day, count (*) cnt 
         								 from o_stat_temptable
         							    group by businesspath, resid, to_char(creationdate, 'D') ) delta
								on (old.businesspath = delta.businesspath AND old.day = delta.day)
								when matched then
								 update set old.value=old.value+delta.cnt
								when not matched then
								 insert (old.businesspath, old.resid, old.day, old.value)
								   values (delta.businesspath, delta.resid, delta.day, delta.cnt)
							</value>
						</list>
					</property>
					<property name="deleteSQL" value="truncate table o_stat_dayofweek"/>
				</bean>
			
				<bean class="org.olat.course.statistic.StatisticUpdater" >
					<property name="loggingName" value="HourOfDayStatisticUpdater"/>
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
					<property name="updateSQL">
						<list>
							<value>
								merge into o_stat_hourofday old 
								using (select businesspath, resid, to_char(creationdate, 'HH24') hour, count (*) cnt 
         								 from o_stat_temptable
         							    group by businesspath, resid, to_char(creationdate, 'HH24') ) delta
								on (old.businesspath = delta.businesspath AND old.hour = delta.hour)
								when matched then
								 update set old.value=old.value+delta.cnt
								when not matched then
								 insert (old.businesspath, old.resid, old.hour, old.value)
								   values (delta.businesspath, delta.resid, delta.hour, delta.cnt)
							</value>
						</list>
					</property>
					<property name="deleteSQL" value="truncate table o_stat_hourofday"/>
				</bean>

				<bean class="org.olat.course.statistic.StatisticUpdater" id="StatTempTableDropper_common">
					<property name="loggingName" value="StatTempTableDropper_common"/>
					<property name="jdbcTemplate" ref="statisticsJdbcTemplate" />
					<property name="updateSQL" value="drop table o_stat_temptable PURGE" />
				</bean>
			</list>
		</property>
	</bean>
	
 	<bean id="org.olat.course.statistic.StatisticUpdateManager" class="org.olat.course.statistic.StatisticUpdateManagerImpl" >
		<constructor-arg>
			<ref bean="coordinatorManager"/>
		</constructor-arg>
		<constructor-arg>
			<ref bean="statisticUpdateConfig_${db.vendor}"/>
		</constructor-arg>
		<constructor-arg value="${cluster.singleton.services}"/>
		<property name="taskExecutorManager" ref="taskExecutorManager"/>
	</bean>

	<bean class="org.olat.course.statistic.SimpleStatisticInfoHelper" >
		<constructor-arg>
			<ref bean="database"/>
		</constructor-arg>
		<constructor-arg>
			<map>
				<entry key="mysql">
					<value>select unix_timestamp(creationdate) from o_loggingtable limit 1;</value>
				</entry>
				<entry key="postgresql">
					<value>select round(date_part('epoch', creationdate)) from o_loggingtable limit 1;</value>
				</entry>
				<entry key="oracle">
					<value>select round((creationdate - TO_DATE('19700101000000','YYYYMMDDHH24MISS'))*86400) from o_loggingtable where rownum=1</value>
				</entry>
			</map>
		</constructor-arg>
	</bean>
</beans>